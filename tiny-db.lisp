(defvar *db* nil)
(defun make-cd (title artist rating ripped)(list :title title :artist artist :rating rating :ripped ripped))
(defun add-record (cd) (push cd *db*))
(defun dump-db () (format t "~{~{~a: ~10t~a~%~}~%~}" *db*))
(defun save-db (filename) (with-open-file (out filename :direction :output :if-exists :supersede) (with-standard-io-systax(print *db* out))))
(defun load-db (filename) (with-open-file (in filename) (with-standard-io-syntax(setf *db* (read in)))))
(defun select (selector-fn) (remove-if-not selector-fn *db*))
(defun artist-selector (artist)
  #'(lambda (cd) (equal (getf cd :artist) artist)))
(defun delete-rows (selector-fn)
  (setf *db* (remove-if selector-fn *db*)))
(defun make-comparison-expr (field value)
  `(equal (getf cd ,field) ,value))
(defun make-comparisons-list (fields)
  (loop while fields
    collecting (make-comparison-expr (pop fields) (pop fields))))
(defmacro where (&rest clauses)
  `#'(lambda (cd) (and ,@(make-comparisons-list clauses))))
(add-record (make-cd "Roses" "Kathy Mattea" 7 t))
(add-record (make-cd "Fly" "Dixie Chicks" 9 t))
(dump-db)
(print (select (artist-selector "Dixie Chicks")))
(print (select (where :title "Roses")))
(print (macroexpand-1 '(where :title "Roses" :ripped t :rating 7)))
